function poisson_lagrange_9node()
    % Define geometry
    L = 2;  % Size of the domain
    Nx = 10;  % Number of elements in x direction
    Ny = 10;  % Number of elements in y direction
    [nodes, elements] = generate_mesh(L, Nx, Ny);

    % Define Lagrange shape functions and their gradients
    [shape_functions, shape_gradients] = define_lagrange_elements();

    % Assemble global stiffness matrix and force vector
    [K, F] = assemble_system(nodes, elements, shape_functions, shape_gradients);

    % Apply boundary conditions
    [K, F] = apply_boundary_conditions(K, F, nodes);

    % Solve the linear system
    U = K \ F;

    % Plot the solution
    plot_solution(nodes, elements, U);
end

function [nodes, elements] = generate_mesh(L, Nx, Ny)
    % Generate a structured mesh for the domain with mid-side and center nodes
    [x, y] = meshgrid(linspace(0, L, Nx+1), linspace(0, L, Ny+1));
    nodes = [x(:), y(:)];

    % Generate mid-side nodes for horizontal and vertical edges
    mid_x = (x(:, 1:end-1) + x(:, 2:end)) / 2;
    mid_y_horizontal = y(:, 1:end-1);
    mid_nodes_x = [mid_x(:), mid_y_horizontal(:)];

    mid_y = (y(1:end-1, :) + y(2:end, :)) / 2;
    mid_x_vertical = x(1:end-1, :);
    mid_nodes_y = [mid_x_vertical(:), mid_y(:)];

    % Generate center nodes
    center_x = (x(1:end-1, 1:end-1) + x(2:end, 2:end)) / 2;
    center_y = (y(1:end-1, 1:end-1) + y(2:end, 2:end)) / 2;
    center_nodes = [center_x(:), center_y(:)];

    % Combine mid-side and center nodes
    mid_nodes = [mid_nodes_x; mid_nodes_y; center_nodes];

    % Combine all nodes
    nodes = [nodes; mid_nodes];

    % Add an index for the mid-side and center nodes to the elements array
    num_original_nodes = (Nx + 1) * (Ny + 1);
    num_mid_x_nodes = numel(mid_x);
    num_mid_y_nodes = numel(mid_y);
    num_center_nodes = numel(center_x);
    elements = [];
    for i = 1:Nx
        for j = 1:Ny
            n1 = (j-1)*(Nx+1) + i;
            n2 = n1 + 1;
            n3 = n2 + Nx + 1;
            n4 = n1 + Nx + 1;

            n5 = num_original_nodes + (j-1)*Nx + i; % mid-side node on the bottom edge
            n6 = num_original_nodes + num_mid_x_nodes + (i-1)*Ny + j; % mid-side node on the right edge
            n7 = num_original_nodes + (j-1)*Nx + i + Nx; % mid-side node on the top edge
            n8 = num_original_nodes + num_mid_x_nodes + (i-1)*Ny + j - 1; % mid-side node on the left edge
            n9 = num_original_nodes + num_mid_x_nodes + num_mid_y_nodes + (j-1)*Nx + i; % center node
            
            elements = [elements; n1, n2, n3, n4, n5, n6, n7, n8, n9];
        end
    end
end

function [shape_functions, shape_gradients] = define_lagrange_elements()
    syms xi eta;
    shape_functions = [
        0.25 * (1 - xi) * (1 - eta) * (xi + eta + 1);   % Shape function 1
        0.25 * (1 + xi) * (1 - eta) * (-xi + eta + 1);  % Shape function 2
        0.25 * (1 + xi) * (1 + eta) * (-xi - eta + 1);  % Shape function 3
        0.25 * (1 - xi) * (1 + eta) * (xi - eta + 1);   % Shape function 4
        0.5 * (1 - xi^2) * (1 - eta);                   % Shape function 5 (mid-side node on the bottom edge)
        0.5 * (1 + xi) * (1 - eta^2);                   % Shape function 6 (mid-side node on the right edge)
        0.5 * (1 - xi^2) * (1 + eta);                   % Shape function 7 (mid-side node on the top edge)
        0.5 * (1 - xi) * (1 - eta^2);                   % Shape function 8 (mid-side node on the left edge)
        (1 - xi^2) * (1 - eta^2)                        % Shape function 9 (center node)
    ];
    shape_gradients = [
        diff(shape_functions, xi)';
        diff(shape_functions, eta)'
    ];
end

function [K, F] = assemble_system(nodes, elements, shape_functions, shape_gradients)
    num_nodes = size(nodes, 1);
    num_elements = size(elements, 1);
    K = sparse(num_nodes, num_nodes);
    F = zeros(num_nodes, 1);

    for e = 1:num_elements
        element_nodes = elements(e, :);
        coords = nodes(element_nodes, :);

        % Compute element stiffness matrix and force vector
        [Ke, Fe] = element_stiffness_force(coords, shape_functions, shape_gradients);

        % Assemble into global stiffness matrix and force vector
        for i = 1:length(element_nodes)
            for j = 1:length(element_nodes)
                K(element_nodes(i), element_nodes(j)) = K(element_nodes(i), element_nodes(j)) + Ke(i, j);
            end
            F(element_nodes(i)) = F(element_nodes(i)) + Fe(i);
        end
    end
end

function [Ke, Fe] = element_stiffness_force(coords, shape_functions, shape_gradients)
    % Numerical integration (Gauss quadrature)
    gauss_points = [-1/sqrt(3), 1/sqrt(3)];
    gauss_weights = [1, 1];
    num_nodes_per_element = size(coords, 1);
    Ke = zeros(num_nodes_per_element, num_nodes_per_element);
    Fe = zeros(num_nodes_per_element, 1);

    for i = 1:length(gauss_points)
        for j = 1:length(gauss_points)
            xi = gauss_points(i);
            eta = gauss_points(j);
            weight = gauss_weights(i) * gauss_weights(j);

            % Evaluate shape functions and gradients at Gauss points
            N = double(subs(shape_functions, {'xi', 'eta'}, {xi, eta}));
            dN_dxi = double(subs(shape_gradients(1, :), {'xi', 'eta'}, {xi, eta}));
            dN_deta = double(subs(shape_gradients(2, :), {'xi', 'eta'}, {xi, eta}));

            % Jacobian matrix and determinant
            J = [dN_dxi; dN_deta] * coords;
            detJ = det(J);
            invJ = inv(J);

            % Gradient of shape functions in physical coordinates
            dN_dx = invJ * [dN_dxi; dN_deta];

            % Element stiffness matrix
            Ke = Ke + (dN_dx' * dN_dx) * detJ * weight;

            % Element force vector
            Fe = Fe + N * detJ * weight;
        end
    end
end

function [K, F] = apply_boundary_conditions(K, F, nodes)
    tol = 1e-5;
    boundary_nodes = find(nodes(:, 1) < tol | nodes(:, 1) > 2-tol | nodes(:, 2) < tol | nodes(:, 2) > 2-tol);
    for i = 1:length(boundary_nodes)
        node = boundary_nodes(i);
        K(node, :) = 0;
        K(node, node) = 1;
        F(node) = 0;
    end
end

function plot_solution(nodes, elements, U)
    % Create a grid of the solution
    L = 2;  % Size of the domain
    Nx = 100;  % Number of elements in x direction
    Ny = 100;  % Number of elements in y direction
    x = linspace(0, L, Nx+1);
    y = linspace(0, L, Ny+1);
    [X, Y] = meshgrid(x, y);
    Z = griddata(nodes(:, 1), nodes(:, 2), U, X, Y);

    % Plot the solution
    surf(X, Y, Z);
    title('Solution of the Poisson equation using 9-node Lagrange elements');
    xlabel('x');
    ylabel('y');
    zlabel('u');
    view(2);  % View from the top
    colorbar;
end
